datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tutor {
  id           String    @id @default(uuid())
  name         String    @db.VarChar(100)
  email        String    @unique(map: "email") @db.VarChar(100)
  password     String    @db.VarChar(64)
  imageUrl     String?   @db.VarChar(255)
  role         Roles
  isAvailable  Boolean   @default(false)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime? @updatedAt @db.DateTime(0)
  students     Student[]
  grades       Grade[]
  subjects     Subject[]
  events       Event[]
  messages     Message[]
  tasksCreated Task[]    @relation("TutorCreatedTask")
  tasksOwned   Task[]    @relation("TutorOwnsTask")
}

model Student {
  id           String      @id @default(uuid())
  name         String      @db.VarChar(100)
  email        String      @unique(map: "email") @db.VarChar(100)
  password     String      @db.VarChar(64)
  imageUrl     String?     @db.VarChar(255)
  role         Roles
  createdAt    DateTime    @default(now()) @db.DateTime(0)
  updatedAt    DateTime?   @updatedAt @db.DateTime(0)
  grade        Grade?      @relation(fields: [gradeName], references: [name], onDelete: Cascade)
  gradeName    Grade_name?
  tutors       Tutor[]
  tasksCreated Task[]      @relation("StudentCreatedTask")
  tasksOwned   Task[]      @relation("StudentOwnsTask")

  @@index([gradeName], map: "GradeName")
}

model Grade {
  name      Grade_name @id
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime?  @updatedAt @db.DateTime(0)
  students  Student[]
  tutors    Tutor[]
}

model Subject {
  name      Subject_name @id
  createdAt DateTime     @default(now()) @db.DateTime(0)
  updatedAt DateTime?    @updatedAt @db.DateTime(0)
  tutors    Tutor[]
}

model Message {
  id        String    @id @default(uuid())
  content   String    @db.Text
  mediaUrl  String?   @db.VarChar(255)
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime? @updatedAt @db.DateTime(0)
  tutorId   String    @db.Char(36)
  tutor     Tutor     @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@index([tutorId], map: "TutorId")
}

model Event {
  id        String         @id @default(uuid())
  title     String         @db.VarChar(100)
  place     String         @db.VarChar(100)
  startTime DateTime       @db.DateTime(0)
  endTime   DateTime       @db.DateTime(0)
  category  Event_category @default(Learn_Home)
  createdAt DateTime       @default(now()) @db.DateTime(0)
  updatedAt DateTime?      @updatedAt @db.DateTime(0)
  TutorId   String         @db.Char(36)
  Tutor     Tutor          @relation(fields: [TutorId], references: [id], onDelete: Cascade)

  @@index([TutorId], map: "TutorId")
}

model Task {
  id             String    @id @default(uuid())
  content        String    @db.VarChar(100)
  isDone         Boolean   @default(false)
  createdAt      DateTime  @default(now()) @db.DateTime(0)
  updatedAt      DateTime? @updatedAt @db.DateTime(0)
  creatorId      String    @db.Char(36)
  tutorCreator   Tutor?    @relation("TutorCreatedTask", fields: [creatorId], references: [id], map: "tutor_creatorId", onDelete: Cascade)
  studentCreator Student?  @relation("StudentCreatedTask", fields: [creatorId], references: [id], map: "student_creatorId", onDelete: Cascade)
  ownerId        String    @db.Char(36)
  tutorOwner     Tutor?    @relation("TutorOwnsTask", fields: [ownerId], references: [id], map: "tutor_ownerId", onDelete: Cascade)
  studentOwner   Student?  @relation("StudentOwnsTask", fields: [ownerId], references: [id], map: "student_ownerId", onDelete: Cascade)
}

// Enumerations

enum Roles {
  student
  tutor
}

enum Grade_name {
  Sixi_me   @map("Sixième")
  Cinqui_me @map("Cinquième")
  Quatri_me @map("Quatrième")
  Troisi_me @map("Troisième")
  Seconde
  Premi_re  @map("Première")
  Terminale
}

enum Subject_name {
  Fran_ais        @map("Français")
  Math_matiques   @map("Mathématiques")
  Anglais
  Espagnol
  Histoire
  G_ographie      @map("Géographie")
  SVT
  Physique_Chimie @map("Physique-Chimie")
}

enum Event_category {
  Learn_Home    @map("Learn@Home")
  Personnel
  Coll_ge_Lyc_e @map("Collège/Lycée")
}
